{
  "service": {
    "service": "coldchain-qldb-demo-v12",
    "serviceObject": {
      "name": "coldchain-qldb-demo-v12"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "memorySize": 512,
      "stage": "v12",
      "region": "us-east-1",
      "logRetentionInDays": 7,
      "tracing": {
        "apiGateway": true,
        "lambda": true
      },
      "environment": {
        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
        "LEDGER_NAME": "coldchain"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "qldb:SendCommand"
          ],
          "Resource": "arn:aws:qldb:us-east-1:125396772501:ledger/coldchain"
        },
        {
          "Effect": "Allow",
          "Action": [
            "qldb:PartiQL*"
          ],
          "Resource": "arn:aws:qldb:us-east-1:125396772501:ledger/coldchain/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "xray:PutTraceSegments",
            "xray:PutTelemetryRecords"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "SNS:Publish"
          ],
          "Resource": "arn:aws:sns:us-east-1:127703500906:InsInno1"
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateNewShipmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/add-shipment-v12",
              "RetentionInDays": 7
            }
          },
          "CreateNewRetailShipmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/add-retailerShipments-v12",
              "RetentionInDays": 7
            }
          },
          "GetShipmentDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-shipment-v12",
              "RetentionInDays": 7
            }
          },
          "DeliverShipmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/deliverShipment-v12",
              "RetentionInDays": 7
            }
          },
          "ReceiveShipmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/receiveShipment-v12",
              "RetentionInDays": 7
            }
          },
          "AddSensorDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/add-sensorData-v12",
              "RetentionInDays": 7
            }
          },
          "GetSensorDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-sensorData-v12",
              "RetentionInDays": 7
            }
          },
          "AddSensorDataSimulationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/add-sensorDataSimulation-v12",
              "RetentionInDays": 7
            }
          },
          "GetShipmentMovementsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-shipmentMovements-v12",
              "RetentionInDays": 7
            }
          },
          "GetAuditTrailLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-auditTrail-v12",
              "RetentionInDays": 7
            }
          },
          "GetTemperatureGraphLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-temperatureGraph-v12",
              "RetentionInDays": 7
            }
          },
          "GetHumidityGraphLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-humidityGraph-v12",
              "RetentionInDays": 7
            }
          },
          "AddInsuranceClaimLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/add-insuranceClaim-v12",
              "RetentionInDays": 7
            }
          },
          "GetClaimDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-claimData-v12",
              "RetentionInDays": 7
            }
          },
          "GetShipmentLocationByPartyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-shipmentLocationByParty-v12",
              "RetentionInDays": 7
            }
          },
          "GetShipmentByPartyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-shipmentByParty-v12",
              "RetentionInDays": 7
            }
          },
          "GetRecentShipmentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-recentShipments-v12",
              "RetentionInDays": 7
            }
          },
          "GetRecentClaimsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-recentClaims-v12",
              "RetentionInDays": 7
            }
          },
          "GetRecentClaimsByPartyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-recentClaimsByParty-v12",
              "RetentionInDays": 7
            }
          },
          "NotifyHighRiskShipmentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/notify-highRiskShipments-v12",
              "RetentionInDays": 7
            }
          },
          "GetHighRiskShipmentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-highRiskShipments-v12",
              "RetentionInDays": 7
            }
          },
          "GetHighRiskShipmentsByPartyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-highRiskShipmentsByParty-v12",
              "RetentionInDays": 7
            }
          },
          "GetShipmentCountByPartyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-shipmentCountByParty-v12",
              "RetentionInDays": 7
            }
          },
          "GetShipmentCountLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-shipmentCount-v12",
              "RetentionInDays": 7
            }
          },
          "GetClaimCountByPartyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-claimCountByParty-v12",
              "RetentionInDays": 7
            }
          },
          "GetClaimCountLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-claimCount-v12",
              "RetentionInDays": 7
            }
          },
          "GetGraphInfoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-graphInfo-v12",
              "RetentionInDays": 7
            }
          },
          "GetTrackingProvenanceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-trackingProvenance-v12",
              "RetentionInDays": 7
            }
          },
          "GetShipmentRouteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/get-shipmentRoute-v12",
              "RetentionInDays": 7
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "coldchain-qldb-demo-v12",
                        "v12",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/add-shipment-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/add-retailerShipments-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipment-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/deliverShipment-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/receiveShipment-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/add-sensorData-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-sensorData-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/add-sensorDataSimulation-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipmentMovements-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-auditTrail-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-temperatureGraph-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-humidityGraph-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/add-insuranceClaim-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-claimData-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipmentLocationByParty-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipmentByParty-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-recentShipments-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-recentClaims-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-recentClaimsByParty-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/notify-highRiskShipments-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-highRiskShipments-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-highRiskShipmentsByParty-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipmentCountByParty-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipmentCount-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-claimCountByParty-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-claimCount-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-graphInfo-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-trackingProvenance-v12:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipmentRoute-v12:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/add-shipment-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/add-retailerShipments-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipment-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/deliverShipment-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/receiveShipment-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/add-sensorData-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-sensorData-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/add-sensorDataSimulation-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipmentMovements-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-auditTrail-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-temperatureGraph-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-humidityGraph-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/add-insuranceClaim-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-claimData-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipmentLocationByParty-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipmentByParty-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-recentShipments-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-recentClaims-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-recentClaimsByParty-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/notify-highRiskShipments-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-highRiskShipments-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-highRiskShipmentsByParty-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipmentCountByParty-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipmentCount-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-claimCountByParty-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-claimCount-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-graphInfo-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-trackingProvenance-v12:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-shipmentRoute-v12:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][3]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "xray:PutTraceSegments",
                          "xray:PutTelemetryRecords"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "coldchain-qldb-demo-v12",
                    "v12",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateNewShipmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/add-shipment.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "add-shipment-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateNewShipmentLogGroup"
            ]
          },
          "CreateNewRetailShipmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/add-retailerShipments.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "add-retailerShipments-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateNewRetailShipmentLogGroup"
            ]
          },
          "GetShipmentDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-shipment.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-shipment-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetShipmentDataLogGroup"
            ]
          },
          "DeliverShipmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/deliver-shipment.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "deliverShipment-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeliverShipmentLogGroup"
            ]
          },
          "ReceiveShipmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/receive-shipment.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "receiveShipment-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReceiveShipmentLogGroup"
            ]
          },
          "AddSensorDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/add-sensorData.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "add-sensorData-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddSensorDataLogGroup"
            ]
          },
          "GetSensorDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-sensorData.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-sensorData-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSensorDataLogGroup"
            ]
          },
          "AddSensorDataSimulationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/add-sensorDataSimulation.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "add-sensorDataSimulation-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddSensorDataSimulationLogGroup"
            ]
          },
          "GetShipmentMovementsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-shipmentMovements.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-shipmentMovements-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetShipmentMovementsLogGroup"
            ]
          },
          "GetAuditTrailLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-auditTrail.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-auditTrail-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAuditTrailLogGroup"
            ]
          },
          "GetTemperatureGraphLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-temperatureGraph.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-temperatureGraph-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTemperatureGraphLogGroup"
            ]
          },
          "GetHumidityGraphLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-humidityGraph.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-humidityGraph-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetHumidityGraphLogGroup"
            ]
          },
          "AddInsuranceClaimLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/add-insuranceClaim.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "add-insuranceClaim-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddInsuranceClaimLogGroup"
            ]
          },
          "GetClaimDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-claimData.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-claimData-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetClaimDataLogGroup"
            ]
          },
          "GetShipmentLocationByPartyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-shipmentLocationByParty.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-shipmentLocationByParty-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetShipmentLocationByPartyLogGroup"
            ]
          },
          "GetShipmentByPartyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-shipmentByParty.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-shipmentByParty-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetShipmentByPartyLogGroup"
            ]
          },
          "GetRecentShipmentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-recentShipments.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-recentShipments-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetRecentShipmentsLogGroup"
            ]
          },
          "GetRecentClaimsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-recentClaims.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-recentClaims-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetRecentClaimsLogGroup"
            ]
          },
          "GetRecentClaimsByPartyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-recentClaimsByParty.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-recentClaimsByParty-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetRecentClaimsByPartyLogGroup"
            ]
          },
          "NotifyHighRiskShipmentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/notify-highRiskShipments.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "notify-highRiskShipments-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NotifyHighRiskShipmentsLogGroup"
            ]
          },
          "GetHighRiskShipmentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-highRiskShipments.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-highRiskShipments-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetHighRiskShipmentsLogGroup"
            ]
          },
          "GetHighRiskShipmentsByPartyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-highRiskShipmentsByParty.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-highRiskShipmentsByParty-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetHighRiskShipmentsByPartyLogGroup"
            ]
          },
          "GetShipmentCountByPartyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-shipmentCountByParty.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-shipmentCountByParty-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetShipmentCountByPartyLogGroup"
            ]
          },
          "GetShipmentCountLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-shipmentCount.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-shipmentCount-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetShipmentCountLogGroup"
            ]
          },
          "GetClaimCountByPartyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-claimCountByParty.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-claimCountByParty-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetClaimCountByPartyLogGroup"
            ]
          },
          "GetClaimCountLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-claimCount.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-claimCount-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetClaimCountLogGroup"
            ]
          },
          "GetGraphInfoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-graphInfo.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-graphInfo-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetGraphInfoLogGroup"
            ]
          },
          "GetTrackingProvenanceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-trackingProvenance.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-trackingProvenance-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTrackingProvenanceLogGroup"
            ]
          },
          "GetShipmentRouteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z/coldchain-qldb-demo-v12.zip"
              },
              "Handler": "functions/get-shipmentRoute.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "get-shipmentRoute-v12",
              "MemorySize": 512,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "LEDGER_NAME": "coldchain"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetShipmentRouteLogGroup"
            ]
          },
          "CreateNewRetailShipmentLambdaVersionSdUTRYT4UshTcNqogLPsDexgRfa5b0sAiEJKCecFg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateNewRetailShipmentLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "DeliverShipmentLambdaVersionHkS3HmyiC8RDwxhDGV9bSdoLBcQAqRPFe7kLCojWg4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeliverShipmentLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "AddSensorDataLambdaVersionASdIw1Px6taTjlXhzkH5mCVZuq8p3OuMLlng9Awio": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddSensorDataLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "CreateNewShipmentLambdaVersionMj1tTCEOSSrBDWou7SkLXXxqTYYwh2btE4t8woxNjm8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateNewShipmentLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetShipmentDataLambdaVersion9YrvmjJ2Z7pGdudHB9T836JJ132CqcuGUlV8q0TFmg0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetShipmentDataLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "AddSensorDataSimulationLambdaVersionndU7urXn1PyicJiX4lDNx3fS24lOcHQ2SZ4DO3wJgQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddSensorDataSimulationLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "ReceiveShipmentLambdaVersioneIZvuVK2rjQhriyLP6OE9YQEbOpWCxCsfmfwaDQvJY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReceiveShipmentLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetAuditTrailLambdaVersionI5Kxbzy2G8FFNWhxLZhKEWxbdi1yqyfhit9wta6EHfA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAuditTrailLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetShipmentMovementsLambdaVersion3EZqYAINxBxMMcvFuvFNpwlnFxD3nZGeUhvYCKDj5Ps": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetShipmentMovementsLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetHumidityGraphLambdaVersionxwGXVXAa9KCVIheTpnLOYoGuwt6DkphK5esfXn2ZOM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetHumidityGraphLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetTemperatureGraphLambdaVersionFq2k9u3DMWbO4AeRT5iNGGMRfFaMQBXJ7i5pKav6E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTemperatureGraphLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetSensorDataLambdaVersionU2PwEKI4DzLlvNAzAnlzzLFTkS8OaR2cXT0kVgms": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSensorDataLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetClaimDataLambdaVersiona5XzP60d2D25NkyNGPjKuEXxarYdMTvQZrPxPmfXL8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetClaimDataLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetShipmentByPartyLambdaVersionBOofB4WwlZSIhVHj8WWj5cdhSylXZVYmsnb8T4A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetShipmentByPartyLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "AddInsuranceClaimLambdaVersion7ZsoQuWw0GyQGgSsmjigO00N4DMRMZzfzo2Lycj5E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddInsuranceClaimLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetShipmentLocationByPartyLambdaVersiond5trfgd0dMpDsbwWSWMu8CztORB63mxHjLRZKOcB8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetShipmentLocationByPartyLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "NotifyHighRiskShipmentsLambdaVersionmxGyYSdpyqdYlW9Ph6MueJMABA2RJb0sgHFUguZc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NotifyHighRiskShipmentsLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetHighRiskShipmentsLambdaVersionW9qeTIicfrw7rIoGjVRfxYqMb5YpIVs8p8BtpaBks": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetHighRiskShipmentsLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetRecentShipmentsLambdaVersionYlvr8IDGNt6fSePMVxToof1ONHjLdegclF6MVNFqbw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetRecentShipmentsLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetShipmentCountByPartyLambdaVersionREqzgtMgBrQQqMdl7QeDkgbEr9sfJfApESTcROf3A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetShipmentCountByPartyLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetHighRiskShipmentsByPartyLambdaVersion3vkJtNYrFCOsRTbhxM2p5CE8ezGUzR6BKaOseiZrU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetHighRiskShipmentsByPartyLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetRecentClaimsByPartyLambdaVersion0geAbmL576kADW7wmmqeAspisiqK0AmSmSraqlMEMIA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetRecentClaimsByPartyLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetRecentClaimsLambdaVersionCnh8ZdYMYL5WF0306javFdsyhU3SyKXsiQmG0M1Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetRecentClaimsLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetShipmentCountLambdaVersionV81mlptlGy3xpj4AEcxO7fRqQFA7NpKdrcDhi5LeU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetShipmentCountLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetClaimCountByPartyLambdaVersionOhDqgd21Yp5fY8AgFW2qsyujcwCRCzTQ3XWOyHA4A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetClaimCountByPartyLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetClaimCountLambdaVersionOyhAUztEF4qYsInfF3lCtQPc28MMRU4ApQ8eLvVYQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetClaimCountLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetGraphInfoLambdaVersionmBQTdY705vI6y4QLrYdMxp8nRbYNN13XYDZcQXQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetGraphInfoLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetShipmentRouteLambdaVersionvqpaAqvAVx1krlm0pbuPQ3dFoaQvOQpM8yOqTXPDiaU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetShipmentRouteLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "GetTrackingProvenanceLambdaVersionCahfvrxBQ1E70Khri8ERnPhdWgtKXhFsntQ7rGx81c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTrackingProvenanceLambdaFunction"
              },
              "CodeSha256": "/N8CZJ2ilhzKI6AGrqF/neCaMzuBpGODGN6TKWhzQek="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "v12-coldchain-qldb-demo-v12",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceColdchain": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "coldchain",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccinebox": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchain"
              },
              "PathPart": "vaccinebox",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxShipment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "shipment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxShipmentShipmentidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipment"
              },
              "PathPart": "{shipmentId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxRetailshipment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "retailShipment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxDeliver": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "deliver",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxDeliverShipment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxDeliver"
              },
              "PathPart": "shipment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxReceive": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "receive",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxReceiveShipment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReceive"
              },
              "PathPart": "shipment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxSensordata": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "sensorData",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxAlert": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "alert",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxAlertSensordata": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxAlert"
              },
              "PathPart": "sensorData",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxSimulatesensordata": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "simulateSensorData",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxEvents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "events",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxEventsShipmentmovements": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxEvents"
              },
              "PathPart": "shipmentMovements",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxEventsShipmentmovementsShipmentidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxEventsShipmentmovements"
              },
              "PathPart": "{shipmentId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxReport": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "report",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxReportSensordataaudittrail": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReport"
              },
              "PathPart": "sensorDataAuditTrail",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxReportSensordataaudittrailShipmentidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReportSensordataaudittrail"
              },
              "PathPart": "{shipmentId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxReportTemperaturegraph": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReport"
              },
              "PathPart": "temperatureGraph",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxReportTemperaturegraphShipmentidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReportTemperaturegraph"
              },
              "PathPart": "{shipmentId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxReportHumiditygraph": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReport"
              },
              "PathPart": "humidityGraph",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxReportHumiditygraphShipmentidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReportHumiditygraph"
              },
              "PathPart": "{shipmentId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxClaimrequest": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "claimRequest",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxShipmentlocation": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "shipmentLocation",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxShipmentlocationPartyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipmentlocation"
              },
              "PathPart": "{party}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxShipmentbyparty": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "shipmentByParty",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxShipmentbypartyPartyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipmentbyparty"
              },
              "PathPart": "{party}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxRecentshipments": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "recentShipments",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxRecentclaims": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "recentClaims",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxRecentclaimsbyparty": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "recentClaimsByParty",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxRecentclaimsbypartyPartyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxRecentclaimsbyparty"
              },
              "PathPart": "{party}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxNotifyhighriskshipments": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "notifyHighRiskShipments",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxHighriskshipments": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "highRiskShipments",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxHighriskshipmentsPartyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxHighriskshipments"
              },
              "PathPart": "{party}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxShipmentcountbyparty": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "shipmentCountByParty",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxShipmentcountbypartyPartyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipmentcountbyparty"
              },
              "PathPart": "{party}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxShipmentcount": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "shipmentCount",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxClaimcountbyparty": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "claimCountByParty",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxClaimcountbypartyPartyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxClaimcountbyparty"
              },
              "PathPart": "{party}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainVaccineboxClaimcount": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainVaccinebox"
              },
              "PathPart": "claimCount",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainInsurance": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchain"
              },
              "PathPart": "insurance",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainInsuranceShipmentdata": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainInsurance"
              },
              "PathPart": "shipmentData",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainShipment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchain"
              },
              "PathPart": "shipment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainShipmentGraphinfo": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainShipment"
              },
              "PathPart": "graphInfo",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainShipmentProvenance": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainShipment"
              },
              "PathPart": "provenance",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainShipmentProvenanceShipmentidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainShipmentProvenance"
              },
              "PathPart": "{shipmentId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainShipmentRoutemap": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainShipment"
              },
              "PathPart": "routeMap",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceColdchainShipmentRoutemapShipmentidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceColdchainShipmentRoutemap"
              },
              "PathPart": "{shipmentId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxShipmentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxRetailshipmentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxRetailshipment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxShipmentShipmentidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipmentShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxDeliverShipmentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxDeliverShipment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxReceiveShipmentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReceiveShipment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxSensordataOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxSensordata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxAlertSensordataOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxAlertSensordata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxSimulatesensordataOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxSimulatesensordata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxEventsShipmentmovementsShipmentidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxEventsShipmentmovementsShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxReportSensordataaudittrailShipmentidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReportSensordataaudittrailShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxReportTemperaturegraphShipmentidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReportTemperaturegraphShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxReportHumiditygraphShipmentidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReportHumiditygraphShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxClaimrequestOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxClaimrequest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainInsuranceShipmentdataOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainInsuranceShipmentdata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxShipmentlocationPartyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipmentlocationPartyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxShipmentbypartyPartyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipmentbypartyPartyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxRecentshipmentsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxRecentshipments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxRecentclaimsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxRecentclaims"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxRecentclaimsbypartyPartyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxRecentclaimsbypartyPartyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxNotifyhighriskshipmentsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxNotifyhighriskshipments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxHighriskshipmentsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxHighriskshipments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxHighriskshipmentsPartyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxHighriskshipmentsPartyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxShipmentcountbypartyPartyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipmentcountbypartyPartyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxShipmentcountOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipmentcount"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxClaimcountbypartyPartyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxClaimcountbypartyPartyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxClaimcountOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxClaimcount"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainShipmentGraphinfoOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainShipmentGraphinfo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainShipmentProvenanceShipmentidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainShipmentProvenanceShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainShipmentRoutemapShipmentidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainShipmentRoutemapShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodColdchainVaccineboxShipmentPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateNewShipmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "ShipVaccineboxResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ],
              "RequestValidatorId": {
                "Ref": "RequestValidator"
              },
              "RequestModels": {
                "application/json": "ShipVaccineboxRequest"
              }
            },
            "DependsOn": [
              "ShipVaccineboxResponseModel",
              "StandardApiErrorModel",
              "ShipVaccineboxRequestModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxRetailshipmentPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxRetailshipment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateNewRetailShipmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "ShipVaccineboxRetailDeliveryResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ],
              "RequestValidatorId": {
                "Ref": "RequestValidator"
              },
              "RequestModels": {
                "application/json": "ShipVaccineboxRetailDeliveryRequest"
              }
            },
            "DependsOn": [
              "ShipVaccineboxRetailDeliveryResponseModel",
              "StandardApiErrorModel",
              "ShipVaccineboxRetailDeliveryRequestModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxShipmentShipmentidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.shipmentId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipmentShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetShipmentDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GetShipmentResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GetShipmentResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxDeliverShipmentPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxDeliverShipment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeliverShipmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "DeliverShipmentResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ],
              "RequestValidatorId": {
                "Ref": "RequestValidator"
              },
              "RequestModels": {
                "application/json": "DeliverShipmentRequest"
              }
            },
            "DependsOn": [
              "DeliverShipmentResponseModel",
              "StandardApiErrorModel",
              "DeliverShipmentRequestModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxReceiveShipmentPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReceiveShipment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ReceiveShipmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "ReceiveShipmentResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ],
              "RequestValidatorId": {
                "Ref": "RequestValidator"
              },
              "RequestModels": {
                "application/json": "ReceiveShipmentRequest"
              }
            },
            "DependsOn": [
              "ReceiveShipmentResponseModel",
              "StandardApiErrorModel",
              "ReceiveShipmentRequestModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxSensordataPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxSensordata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddSensorDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "AddSensorDataResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ],
              "RequestValidatorId": {
                "Ref": "RequestValidator"
              },
              "RequestModels": {
                "application/json": "AddSensorDataRequest"
              }
            },
            "DependsOn": [
              "AddSensorDataResponseModel",
              "StandardApiErrorModel",
              "AddSensorDataRequestModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxAlertSensordataGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxAlertSensordata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSensorDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GetSensorDataResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GetSensorDataResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxSimulatesensordataPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxSimulatesensordata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddSensorDataSimulationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "AddSensorDataSimulationResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ],
              "RequestValidatorId": {
                "Ref": "RequestValidator"
              },
              "RequestModels": {
                "application/json": "AddSensorDataSimulationRequest"
              }
            },
            "DependsOn": [
              "AddSensorDataSimulationResponseModel",
              "StandardApiErrorModel",
              "AddSensorDataSimulationRequestModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxEventsShipmentmovementsShipmentidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.shipmentId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxEventsShipmentmovementsShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetShipmentMovementsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GetShipmentMovementsResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GetShipmentMovementsResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxReportSensordataaudittrailShipmentidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.shipmentId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReportSensordataaudittrailShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAuditTrailLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GetAuditTrailResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GetAuditTrailResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxReportTemperaturegraphShipmentidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.shipmentId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReportTemperaturegraphShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTemperatureGraphLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GetAuditTrailResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GetAuditTrailResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxReportHumiditygraphShipmentidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.shipmentId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxReportHumiditygraphShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetHumidityGraphLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GetAuditTrailResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GetAuditTrailResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxClaimrequestPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxClaimrequest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddInsuranceClaimLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "AddClaimDataResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ],
              "RequestValidatorId": {
                "Ref": "RequestValidator"
              },
              "RequestModels": {
                "application/json": "AddClaimDataRequest"
              }
            },
            "DependsOn": [
              "AddClaimDataResponseModel",
              "StandardApiErrorModel",
              "AddClaimDataRequestModel"
            ]
          },
          "ApiGatewayMethodColdchainInsuranceShipmentdataGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainInsuranceShipmentdata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetClaimDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GetClaimDataResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GetClaimDataResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxShipmentlocationPartyVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.party": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipmentlocationPartyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetShipmentLocationByPartyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GetClaimDataResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GetClaimDataResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxShipmentbypartyPartyVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.party": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipmentbypartyPartyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetShipmentByPartyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GetShipmentByPartyResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GetShipmentByPartyResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxRecentshipmentsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxRecentshipments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetRecentShipmentsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GetRecentShipmentResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GetRecentShipmentResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxRecentclaimsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxRecentclaims"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetRecentClaimsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GetRecentClaimResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GetRecentClaimResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxRecentclaimsbypartyPartyVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.party": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxRecentclaimsbypartyPartyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetRecentClaimsByPartyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GetRecentClaimResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GetRecentClaimResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxNotifyhighriskshipmentsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxNotifyhighriskshipments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "NotifyHighRiskShipmentsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "HighRiskNotificationResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "HighRiskNotificationResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxHighriskshipmentsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxHighriskshipments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetHighRiskShipmentsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GetHighRiskShipmentResponse"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GetHighRiskShipmentResponseModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxHighriskshipmentsPartyVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.party": false,
                "method.request.path.undefined": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxHighriskshipmentsPartyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetHighRiskShipmentsByPartyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200"
                }
              ]
            }
          },
          "ApiGatewayMethodColdchainVaccineboxShipmentcountbypartyPartyVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.party": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipmentcountbypartyPartyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetShipmentCountByPartyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "ShipmentCount"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "ShipmentCountModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxShipmentcountGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxShipmentcount"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetShipmentCountLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "ShipmentCount"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "ShipmentCountModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxClaimcountbypartyPartyVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.party": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxClaimcountbypartyPartyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetClaimCountByPartyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "ClaimCount"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "ClaimCountModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainVaccineboxClaimcountGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainVaccineboxClaimcount"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetClaimCountLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "ClaimCount"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "ClaimCountModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainShipmentGraphinfoGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainShipmentGraphinfo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetGraphInfoLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "GraphInfo"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "GraphInfoModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainShipmentProvenanceShipmentidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.shipmentId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainShipmentProvenanceShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTrackingProvenanceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "RetailerShipments"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "RetailerShipmentsModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayMethodColdchainShipmentRoutemapShipmentidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.shipmentId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceColdchainShipmentRoutemapShipmentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetShipmentRouteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseModels": {
                    "application/json": "RouteMap"
                  }
                },
                {
                  "StatusCode": "400",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                },
                {
                  "StatusCode": "500",
                  "ResponseModels": {
                    "application/json": "StandardApiError"
                  }
                }
              ]
            },
            "DependsOn": [
              "RouteMapModel",
              "StandardApiErrorModel"
            ]
          },
          "ApiGatewayDeployment1646495362520": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "v12"
            },
            "DependsOn": [
              "ApiGatewayMethodColdchainVaccineboxShipmentOptions",
              "ApiGatewayMethodColdchainVaccineboxRetailshipmentOptions",
              "ApiGatewayMethodColdchainVaccineboxShipmentShipmentidVarOptions",
              "ApiGatewayMethodColdchainVaccineboxDeliverShipmentOptions",
              "ApiGatewayMethodColdchainVaccineboxReceiveShipmentOptions",
              "ApiGatewayMethodColdchainVaccineboxSensordataOptions",
              "ApiGatewayMethodColdchainVaccineboxAlertSensordataOptions",
              "ApiGatewayMethodColdchainVaccineboxSimulatesensordataOptions",
              "ApiGatewayMethodColdchainVaccineboxEventsShipmentmovementsShipmentidVarOptions",
              "ApiGatewayMethodColdchainVaccineboxReportSensordataaudittrailShipmentidVarOptions",
              "ApiGatewayMethodColdchainVaccineboxReportTemperaturegraphShipmentidVarOptions",
              "ApiGatewayMethodColdchainVaccineboxReportHumiditygraphShipmentidVarOptions",
              "ApiGatewayMethodColdchainVaccineboxClaimrequestOptions",
              "ApiGatewayMethodColdchainInsuranceShipmentdataOptions",
              "ApiGatewayMethodColdchainVaccineboxShipmentlocationPartyVarOptions",
              "ApiGatewayMethodColdchainVaccineboxShipmentbypartyPartyVarOptions",
              "ApiGatewayMethodColdchainVaccineboxRecentshipmentsOptions",
              "ApiGatewayMethodColdchainVaccineboxRecentclaimsOptions",
              "ApiGatewayMethodColdchainVaccineboxRecentclaimsbypartyPartyVarOptions",
              "ApiGatewayMethodColdchainVaccineboxNotifyhighriskshipmentsOptions",
              "ApiGatewayMethodColdchainVaccineboxHighriskshipmentsOptions",
              "ApiGatewayMethodColdchainVaccineboxHighriskshipmentsPartyVarOptions",
              "ApiGatewayMethodColdchainVaccineboxShipmentcountbypartyPartyVarOptions",
              "ApiGatewayMethodColdchainVaccineboxShipmentcountOptions",
              "ApiGatewayMethodColdchainVaccineboxClaimcountbypartyPartyVarOptions",
              "ApiGatewayMethodColdchainVaccineboxClaimcountOptions",
              "ApiGatewayMethodColdchainShipmentGraphinfoOptions",
              "ApiGatewayMethodColdchainShipmentProvenanceShipmentidVarOptions",
              "ApiGatewayMethodColdchainShipmentRoutemapShipmentidVarOptions",
              "ApiGatewayMethodColdchainVaccineboxShipmentPost",
              "ApiGatewayMethodColdchainVaccineboxRetailshipmentPost",
              "ApiGatewayMethodColdchainVaccineboxShipmentShipmentidVarGet",
              "ApiGatewayMethodColdchainVaccineboxDeliverShipmentPut",
              "ApiGatewayMethodColdchainVaccineboxReceiveShipmentPut",
              "ApiGatewayMethodColdchainVaccineboxSensordataPut",
              "ApiGatewayMethodColdchainVaccineboxAlertSensordataGet",
              "ApiGatewayMethodColdchainVaccineboxSimulatesensordataPost",
              "ApiGatewayMethodColdchainVaccineboxEventsShipmentmovementsShipmentidVarGet",
              "ApiGatewayMethodColdchainVaccineboxReportSensordataaudittrailShipmentidVarGet",
              "ApiGatewayMethodColdchainVaccineboxReportTemperaturegraphShipmentidVarGet",
              "ApiGatewayMethodColdchainVaccineboxReportHumiditygraphShipmentidVarGet",
              "ApiGatewayMethodColdchainVaccineboxClaimrequestPost",
              "ApiGatewayMethodColdchainInsuranceShipmentdataGet",
              "ApiGatewayMethodColdchainVaccineboxShipmentlocationPartyVarGet",
              "ApiGatewayMethodColdchainVaccineboxShipmentbypartyPartyVarGet",
              "ApiGatewayMethodColdchainVaccineboxRecentshipmentsGet",
              "ApiGatewayMethodColdchainVaccineboxRecentclaimsGet",
              "ApiGatewayMethodColdchainVaccineboxRecentclaimsbypartyPartyVarGet",
              "ApiGatewayMethodColdchainVaccineboxNotifyhighriskshipmentsGet",
              "ApiGatewayMethodColdchainVaccineboxHighriskshipmentsGet",
              "ApiGatewayMethodColdchainVaccineboxHighriskshipmentsPartyVarGet",
              "ApiGatewayMethodColdchainVaccineboxShipmentcountbypartyPartyVarGet",
              "ApiGatewayMethodColdchainVaccineboxShipmentcountGet",
              "ApiGatewayMethodColdchainVaccineboxClaimcountbypartyPartyVarGet",
              "ApiGatewayMethodColdchainVaccineboxClaimcountGet",
              "ApiGatewayMethodColdchainShipmentGraphinfoGet",
              "ApiGatewayMethodColdchainShipmentProvenanceShipmentidVarGet",
              "ApiGatewayMethodColdchainShipmentRoutemapShipmentidVarGet"
            ]
          },
          "CreateNewShipmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateNewShipmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateNewRetailShipmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateNewRetailShipmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetShipmentDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetShipmentDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeliverShipmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeliverShipmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ReceiveShipmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReceiveShipmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddSensorDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddSensorDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSensorDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSensorDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddSensorDataSimulationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddSensorDataSimulationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetShipmentMovementsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetShipmentMovementsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAuditTrailLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAuditTrailLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTemperatureGraphLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTemperatureGraphLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetHumidityGraphLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetHumidityGraphLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddInsuranceClaimLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddInsuranceClaimLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetClaimDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetClaimDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetShipmentLocationByPartyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetShipmentLocationByPartyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetShipmentByPartyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetShipmentByPartyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetRecentShipmentsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetRecentShipmentsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetRecentClaimsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetRecentClaimsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetRecentClaimsByPartyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetRecentClaimsByPartyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "NotifyHighRiskShipmentsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NotifyHighRiskShipmentsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetHighRiskShipmentsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetHighRiskShipmentsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetHighRiskShipmentsByPartyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetHighRiskShipmentsByPartyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetShipmentCountByPartyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetShipmentCountByPartyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetShipmentCountLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetShipmentCountLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetClaimCountByPartyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetClaimCountByPartyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetClaimCountLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetClaimCountLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetGraphInfoLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetGraphInfoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTrackingProvenanceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTrackingProvenanceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetShipmentRouteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetShipmentRouteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ShipVaccineboxRequestModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Name": "ShipVaccineboxRequest",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "vaccineName",
                  "shipmentId",
                  "quantity",
                  "wayBill"
                ],
                "properties": {
                  "vaccineName": {
                    "type": "string"
                  },
                  "shipmentId": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "string"
                  },
                  "wayBill": {
                    "type": "object",
                    "properties": {
                      "origin": {
                        "type": "string"
                      },
                      "originRole": {
                        "type": "string"
                      },
                      "originAddress": {
                        "type": "string"
                      },
                      "destination": {
                        "type": "string"
                      },
                      "destinationRole": {
                        "type": "string"
                      },
                      "destinationAddress": {
                        "type": "string"
                      },
                      "logistics": {
                        "type": "string"
                      }
                    }
                  },
                  "policyId": {
                    "type": "string"
                  },
                  "insurer": {
                    "type": "string"
                  },
                  "insuredValue": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "ShipVaccineboxResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "ShipVaccineboxResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "vaccineName",
                  "shipmentId",
                  "quantity",
                  "temperatureExcursion",
                  "manufacturer",
                  "currentRole",
                  "currentOwner",
                  "status",
                  "shipmentTrackerEvent"
                ],
                "properties": {
                  "vaccineName": {
                    "type": "string"
                  },
                  "shipmentId": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "string"
                  },
                  "destinationAddress": {
                    "type": "string"
                  },
                  "temperatureExcursion": {
                    "type": "integer"
                  },
                  "manufacturer": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "currentRole": {
                    "type": "string"
                  },
                  "currentOwner": {
                    "type": "string"
                  },
                  "policyId": {
                    "type": "string"
                  },
                  "insurer": {
                    "type": "string"
                  },
                  "insuredValue": {
                    "type": "integer"
                  },
                  "shipmentTrackerEvent": {
                    "type": "object",
                    "required": [
                      "eventOwner",
                      "eventRole",
                      "eventType",
                      "eventDesc",
                      "sensorCondition",
                      "eventDate"
                    ],
                    "properties": {
                      "eventOwner": {
                        "type": "string"
                      },
                      "eventRole": {
                        "type": "string"
                      },
                      "eventType": {
                        "type": "string"
                      },
                      "eventDesc": {
                        "type": "string"
                      },
                      "sensorCondition": {
                        "type": "string"
                      },
                      "eventDate": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "nextRole": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "ShipVaccineboxRetailDeliveryRequestModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "ShipVaccineboxRetailDeliveryRequest",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "RetailShipmentId",
                  "RetailQuantity",
                  "WayBill",
                  "MasterShipmentId"
                ],
                "properties": {
                  "RetailShipmentId": {
                    "type": "string"
                  },
                  "RetailQuantity": {
                    "type": "integer"
                  },
                  "WayBill": {
                    "type": "object",
                    "properties": {
                      "origin": {
                        "type": "string"
                      },
                      "originRole": {
                        "type": "string"
                      },
                      "originAddress": {
                        "type": "string"
                      },
                      "destination": {
                        "type": "string"
                      },
                      "destinationRole": {
                        "type": "string"
                      },
                      "destinationAddress": {
                        "type": "string"
                      },
                      "logistics": {
                        "type": "string"
                      }
                    }
                  },
                  "MasterShipmentId": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "ShipVaccineboxRetailDeliveryResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "ShipVaccineboxRetailDeliveryResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "RetailShipmentId",
                  "RetailQuantity",
                  "WayBill",
                  "MasterShipmentIde"
                ],
                "properties": {
                  "RetailShipmentId": {
                    "type": "string"
                  },
                  "RetailQuantity": {
                    "type": "string"
                  },
                  "WayBill": {
                    "type": "object",
                    "properties": {
                      "origin": {
                        "type": "string"
                      },
                      "originRole": {
                        "type": "string"
                      },
                      "originAddress": {
                        "type": "string"
                      },
                      "destination": {
                        "type": "string"
                      },
                      "destinationRole": {
                        "type": "string"
                      },
                      "destinationAddress": {
                        "type": "string"
                      },
                      "logistics": {
                        "type": "string"
                      }
                    }
                  },
                  "MasterShipmentId": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "AddSensorDataRequestModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "AddSensorDataRequest",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "deviceId",
                  "telemetry"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "deviceId": {
                    "type": "string"
                  },
                  "telemetry": {
                    "type": "object",
                    "properties": {
                      "eventType": {
                        "type": "string"
                      },
                      "eventDesc": {
                        "type": "string"
                      },
                      "temp": {
                        "type": "integer"
                      },
                      "humidity": {
                        "type": "integer"
                      },
                      "longitude": {
                        "type": "string"
                      },
                      "latitude": {
                        "type": "string"
                      },
                      "eventDate": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "AddSensorDataResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "AddSensorDataResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "deviceId",
                  "response"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "deviceId": {
                    "type": "string"
                  },
                  "response": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "AddSensorDataSimulationRequestModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "AddSensorDataSimulationRequest",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "deviceId",
                  "telemetry"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "deviceId": {
                    "type": "string"
                  },
                  "telemetry": {
                    "type": "object",
                    "properties": {
                      "eventType": {
                        "type": "string"
                      },
                      "eventDesc": {
                        "type": "string"
                      },
                      "temp": {
                        "type": "integer"
                      },
                      "humidity": {
                        "type": "integer"
                      },
                      "longitude": {
                        "type": "string"
                      },
                      "latitude": {
                        "type": "string"
                      },
                      "eventDate": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "AddSensorDataSimulationResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "AddSensorDataSimulationResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "deviceId",
                  "response"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "deviceId": {
                    "type": "string"
                  },
                  "response": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "DeliverShipmentRequestModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "DeliverShipmentRequest",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "currentOwner",
                  "currentRole",
                  "nextRole",
                  "shipmentTrackerEvent"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "currentOwner": {
                    "type": "string"
                  },
                  "currentRole": {
                    "type": "string"
                  },
                  "nextRole": {
                    "type": "string"
                  },
                  "shipmentTrackerEvent": {
                    "type": "object",
                    "properties": {
                      "eventType": {
                        "type": "string"
                      },
                      "eventDesc": {
                        "type": "string"
                      },
                      "eventDate": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "sensorCondition": {
                        "type": "string"
                      },
                      "nextRole": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "DeliverShipmentResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "DeliverShipmentResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "currentRole",
                  "nextRole",
                  "response"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "currentRole": {
                    "type": "string"
                  },
                  "nextRole": {
                    "type": "string"
                  },
                  "response": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "ReceiveShipmentRequestModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "ReceiveShipmentRequest",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "currentRole",
                  "nextRole",
                  "shipmentTrackerEvent"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "currentRole": {
                    "type": "string"
                  },
                  "nextRole": {
                    "type": "string"
                  },
                  "shipmentTrackerEvent": {
                    "type": "object",
                    "properties": {
                      "eventType": {
                        "type": "string"
                      },
                      "eventDesc": {
                        "type": "string"
                      },
                      "sensorCondition": {
                        "type": "string"
                      },
                      "eventDate": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "ReceiveShipmentResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "ReceiveShipmentResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "currentRole",
                  "shipmentTrackerEvent"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "currentRole": {
                    "type": "string"
                  },
                  "shipmentTrackerEvent": {
                    "type": "object",
                    "properties": {
                      "eventType": {
                        "type": "string"
                      },
                      "eventDesc": {
                        "type": "string"
                      },
                      "sensorCondition": {
                        "type": "string"
                      },
                      "eventDate": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "nextRole": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "GetShipmentResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "GetShipmentResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "vaccineName",
                  "shipmentId",
                  "quantity",
                  "destinationAddress",
                  "temperatureExcursion",
                  "manufacturer",
                  "currentRole",
                  "shipmentTrackerEvent"
                ],
                "properties": {
                  "vaccineName": {
                    "type": "string"
                  },
                  "shipmentId": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "string"
                  },
                  "destinationAddress": {
                    "type": "string"
                  },
                  "deviceid": {
                    "type": "string"
                  },
                  "temperatureExcursion": {
                    "type": "integer"
                  },
                  "currentRole": {
                    "type": "string"
                  },
                  "policyId": {
                    "type": "string"
                  },
                  "insurer": {
                    "type": "string"
                  },
                  "claimId": {
                    "type": "string"
                  },
                  "claimStatus": {
                    "type": "string"
                  },
                  "shipmentTrackerEvents": {
                    "type": "array",
                    "description": "Array of events against the Vaccinebox",
                    "items": {
                      "type": "object",
                      "required": [
                        "eventType",
                        "eventDesc",
                        "sensorCondition",
                        "eventDate",
                        "nextRole"
                      ],
                      "properties": {
                        "eventOwner": {
                          "type": "string"
                        },
                        "eventType": {
                          "type": "string"
                        },
                        "eventDesc": {
                          "type": "string"
                        },
                        "sensorCondition": {
                          "type": "string"
                        },
                        "eventDate": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "nextRole": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "GetShipmentMovementsResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "GetShipmentMovementsResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "status",
                  "sensorCondition",
                  "eventDate"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "sensorCondition": {
                    "type": "string"
                  },
                  "eventDate": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "GetSensorDataResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "GetSensorDataResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "deviceid",
                  "temperature",
                  "txTime",
                  "Hash"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "deviceId": {
                    "type": "string"
                  },
                  "temperature": {
                    "type": "integer"
                  },
                  "txTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "Hash": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "GetAssetTransferHistoryResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "GetAssetTransferHistoryResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "deviceid",
                  "temperatureExcursion",
                  "currentOwner",
                  "PartyAddress",
                  "hash",
                  "txId"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "deviceid": {
                    "type": "string"
                  },
                  "temperatureExcursion": {
                    "type": "string"
                  },
                  "currentOwner": {
                    "type": "string"
                  },
                  "PartyAddress": {
                    "type": "string"
                  },
                  "hash": {
                    "type": "string"
                  },
                  "txId": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "GetAuditTrailResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "GetAuditTrailResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "status",
                  "eventDate"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "eventDate": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "AddClaimDataRequestModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "AddClaimDataRequest",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "policyId"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "policyId": {
                    "type": "string"
                  },
                  "claimRequestDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "claimStatus": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "AddClaimDataResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "AddClaimDataResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "policyId",
                  "claimId",
                  "response"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "policyId": {
                    "type": "string"
                  },
                  "claimId": {
                    "type": "string"
                  },
                  "response": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "GetClaimDataResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "GetClaimDataResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "claimRequestDate",
                  "manufacturer",
                  "vaccineName",
                  "quantity",
                  "status"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "claimRequestDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "manufacturer": {
                    "type": "string"
                  },
                  "vaccineName": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "GetRecentShipmentResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "GetRecentShipmentResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "shippingDate"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "shippingDate": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "GetRecentClaimResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "GetRecentClaimResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "claimRequestDate",
                  "manufacturer",
                  "vaccineName",
                  "quantity",
                  "status"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "claimRequestDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "manufacturer": {
                    "type": "string"
                  },
                  "vaccineName": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "GraphInfoModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "GraphInfo",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "properties": {
                  "RiskRating": {
                    "type": "integer"
                  },
                  "GeoLocation": {
                    "type": "object",
                    "properties": {
                      "latitude": {
                        "type": "string"
                      },
                      "longitude": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "HighRiskNotificationResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "HighRiskNotificationResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "highRiskShipmentCount"
                ],
                "properties": {
                  "highRiskShipmentCount": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "ShipmentCountModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "ShipmentCount",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentCount"
                ],
                "properties": {
                  "shipmentCount": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "ClaimCountModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "ClaimCount",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "claimCount"
                ],
                "properties": {
                  "claimCount": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "CountShipmentsAndClaimsModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "CountShipmentsAndClaims",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentCount",
                  "claimCount"
                ],
                "properties": {
                  "shipmentCount": {
                    "type": "integer"
                  },
                  "claimCount": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "GetHighRiskShipmentResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "GetHighRiskShipmentResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "claimRequestDate",
                  "manufacturer",
                  "vaccineName",
                  "quantity",
                  "status"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "claimRequestDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "manufacturer": {
                    "type": "string"
                  },
                  "vaccineName": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "GetShipmentByPartyResponseModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "GetShipmentByPartyResponse",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "required": [
                  "shipmentId",
                  "policyId",
                  "manufacturer",
                  "vaccineName",
                  "quantity",
                  "status",
                  "claimId"
                ],
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "policyId": {
                    "type": "string"
                  },
                  "vaccineName": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "string"
                  },
                  "claimId": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "RetailerShipmentsModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "RetailerShipments",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "deviceId": {
                    "type": "string"
                  },
                  "batchId": {
                    "type": "string"
                  },
                  "RootLeg": {
                    "type": "object"
                  },
                  "ChildLeg": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "RouteMapModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "RouteMap",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "properties": {
                  "shipmentId": {
                    "type": "string"
                  },
                  "CurrentLocation": {
                    "type": "object"
                  },
                  "Legs": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "StandardApiErrorModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
              },
              "ContentType": "application/json",
              "Name": "StandardApiError",
              "Schema": {
                "$schema": "http://json-schema.org/draft/2019-09/schema#",
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "detail": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "RequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "Name": "req-validator",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true
            }
          },
          "GatewayResponse": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseType": "BAD_REQUEST_BODY",
              "ResponseTemplates": {
                "application/json": "{\"status\":\"400\", \"title\":\"Invalid Request\", \"detail\": \"$context.error.validationErrorString\"}"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StatusCode": "400"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-ServerlessDeploymentBucketName"
            }
          },
          "CreateNewRetailShipmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateNewRetailShipmentLambdaVersionSdUTRYT4UshTcNqogLPsDexgRfa5b0sAiEJKCecFg"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-CreateNewRetailShipmentLambdaFunctionQualifiedArn"
            }
          },
          "DeliverShipmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeliverShipmentLambdaVersionHkS3HmyiC8RDwxhDGV9bSdoLBcQAqRPFe7kLCojWg4"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-DeliverShipmentLambdaFunctionQualifiedArn"
            }
          },
          "AddSensorDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddSensorDataLambdaVersionASdIw1Px6taTjlXhzkH5mCVZuq8p3OuMLlng9Awio"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-AddSensorDataLambdaFunctionQualifiedArn"
            }
          },
          "CreateNewShipmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateNewShipmentLambdaVersionMj1tTCEOSSrBDWou7SkLXXxqTYYwh2btE4t8woxNjm8"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-CreateNewShipmentLambdaFunctionQualifiedArn"
            }
          },
          "GetShipmentDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetShipmentDataLambdaVersion9YrvmjJ2Z7pGdudHB9T836JJ132CqcuGUlV8q0TFmg0"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetShipmentDataLambdaFunctionQualifiedArn"
            }
          },
          "AddSensorDataSimulationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddSensorDataSimulationLambdaVersionndU7urXn1PyicJiX4lDNx3fS24lOcHQ2SZ4DO3wJgQ"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-AddSensorDataSimulationLambdaFunctionQualifiedArn"
            }
          },
          "ReceiveShipmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReceiveShipmentLambdaVersioneIZvuVK2rjQhriyLP6OE9YQEbOpWCxCsfmfwaDQvJY"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-ReceiveShipmentLambdaFunctionQualifiedArn"
            }
          },
          "GetAuditTrailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAuditTrailLambdaVersionI5Kxbzy2G8FFNWhxLZhKEWxbdi1yqyfhit9wta6EHfA"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetAuditTrailLambdaFunctionQualifiedArn"
            }
          },
          "GetShipmentMovementsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetShipmentMovementsLambdaVersion3EZqYAINxBxMMcvFuvFNpwlnFxD3nZGeUhvYCKDj5Ps"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetShipmentMovementsLambdaFunctionQualifiedArn"
            }
          },
          "GetHumidityGraphLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetHumidityGraphLambdaVersionxwGXVXAa9KCVIheTpnLOYoGuwt6DkphK5esfXn2ZOM"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetHumidityGraphLambdaFunctionQualifiedArn"
            }
          },
          "GetTemperatureGraphLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTemperatureGraphLambdaVersionFq2k9u3DMWbO4AeRT5iNGGMRfFaMQBXJ7i5pKav6E"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetTemperatureGraphLambdaFunctionQualifiedArn"
            }
          },
          "GetSensorDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSensorDataLambdaVersionU2PwEKI4DzLlvNAzAnlzzLFTkS8OaR2cXT0kVgms"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetSensorDataLambdaFunctionQualifiedArn"
            }
          },
          "GetClaimDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetClaimDataLambdaVersiona5XzP60d2D25NkyNGPjKuEXxarYdMTvQZrPxPmfXL8"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetClaimDataLambdaFunctionQualifiedArn"
            }
          },
          "GetShipmentByPartyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetShipmentByPartyLambdaVersionBOofB4WwlZSIhVHj8WWj5cdhSylXZVYmsnb8T4A"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetShipmentByPartyLambdaFunctionQualifiedArn"
            }
          },
          "AddInsuranceClaimLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddInsuranceClaimLambdaVersion7ZsoQuWw0GyQGgSsmjigO00N4DMRMZzfzo2Lycj5E"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-AddInsuranceClaimLambdaFunctionQualifiedArn"
            }
          },
          "GetShipmentLocationByPartyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetShipmentLocationByPartyLambdaVersiond5trfgd0dMpDsbwWSWMu8CztORB63mxHjLRZKOcB8"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetShipmentLocationByPartyLambdaFunctionQualifiedArn"
            }
          },
          "NotifyHighRiskShipmentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NotifyHighRiskShipmentsLambdaVersionmxGyYSdpyqdYlW9Ph6MueJMABA2RJb0sgHFUguZc"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-NotifyHighRiskShipmentsLambdaFunctionQualifiedArn"
            }
          },
          "GetHighRiskShipmentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetHighRiskShipmentsLambdaVersionW9qeTIicfrw7rIoGjVRfxYqMb5YpIVs8p8BtpaBks"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetHighRiskShipmentsLambdaFunctionQualifiedArn"
            }
          },
          "GetRecentShipmentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetRecentShipmentsLambdaVersionYlvr8IDGNt6fSePMVxToof1ONHjLdegclF6MVNFqbw"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetRecentShipmentsLambdaFunctionQualifiedArn"
            }
          },
          "GetShipmentCountByPartyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetShipmentCountByPartyLambdaVersionREqzgtMgBrQQqMdl7QeDkgbEr9sfJfApESTcROf3A"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetShipmentCountByPartyLambdaFunctionQualifiedArn"
            }
          },
          "GetHighRiskShipmentsByPartyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetHighRiskShipmentsByPartyLambdaVersion3vkJtNYrFCOsRTbhxM2p5CE8ezGUzR6BKaOseiZrU"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetHighRiskShipmentsByPartyLambdaFunctionQualifiedArn"
            }
          },
          "GetRecentClaimsByPartyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetRecentClaimsByPartyLambdaVersion0geAbmL576kADW7wmmqeAspisiqK0AmSmSraqlMEMIA"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetRecentClaimsByPartyLambdaFunctionQualifiedArn"
            }
          },
          "GetRecentClaimsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetRecentClaimsLambdaVersionCnh8ZdYMYL5WF0306javFdsyhU3SyKXsiQmG0M1Y"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetRecentClaimsLambdaFunctionQualifiedArn"
            }
          },
          "GetShipmentCountLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetShipmentCountLambdaVersionV81mlptlGy3xpj4AEcxO7fRqQFA7NpKdrcDhi5LeU"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetShipmentCountLambdaFunctionQualifiedArn"
            }
          },
          "GetClaimCountByPartyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetClaimCountByPartyLambdaVersionOhDqgd21Yp5fY8AgFW2qsyujcwCRCzTQ3XWOyHA4A"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetClaimCountByPartyLambdaFunctionQualifiedArn"
            }
          },
          "GetClaimCountLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetClaimCountLambdaVersionOyhAUztEF4qYsInfF3lCtQPc28MMRU4ApQ8eLvVYQ"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetClaimCountLambdaFunctionQualifiedArn"
            }
          },
          "GetGraphInfoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetGraphInfoLambdaVersionmBQTdY705vI6y4QLrYdMxp8nRbYNN13XYDZcQXQ"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetGraphInfoLambdaFunctionQualifiedArn"
            }
          },
          "GetShipmentRouteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetShipmentRouteLambdaVersionvqpaAqvAVx1krlm0pbuPQ3dFoaQvOQpM8yOqTXPDiaU"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetShipmentRouteLambdaFunctionQualifiedArn"
            }
          },
          "GetTrackingProvenanceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTrackingProvenanceLambdaVersionCahfvrxBQ1E70Khri8ERnPhdWgtKXhFsntQ7rGx81c"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-GetTrackingProvenanceLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/v12"
                ]
              ]
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-ServiceEndpoint"
            }
          },
          "AwsDocApiId": {
            "Description": "API ID",
            "Value": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"RestApiId\"]"
            },
            "Export": {
              "Name": "sls-coldchain-qldb-demo-v12-v12-AwsDocApiId"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "documentation": {
        "version": "0.20",
        "title": "Coldchain QLDB  Demo API",
        "description": "Documentation of the APIs for the Coldchain QLDB demo application",
        "models": [
          {
            "name": "ShipVaccineboxRequest",
            "description": "Ship Vaccinebox request model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRequestModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "ShipVaccineboxResponse",
            "description": "Ship Vaccinebox response model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "ShipVaccineboxRetailDeliveryRequest",
            "description": "Ship Vaccinebox request model for retail delivery",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRetailDeliveryRequestModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "ShipVaccineboxRetailDeliveryResponse",
            "description": "Sensor Data request model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipVaccineboxRetailDeliveryResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "AddSensorDataRequest",
            "description": "Update Deliver Shipment  request model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddSensorDataRequestModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "AddSensorDataResponse",
            "description": "Sensor Data request model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddSensorDataResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "AddSensorDataSimulationRequest",
            "description": "Update Deliver Shipment  request model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddSensorDataSimulationRequestModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "AddSensorDataSimulationResponse",
            "description": "Sensor Data Response model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddSensorDataSimulationResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "DeliverShipmentRequest",
            "description": "Update Deliver Shipment  request model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeliverShipmentRequestModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "DeliverShipmentResponse",
            "description": "Update Deliver Shipment Response model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeliverShipmentResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "ReceiveShipmentRequest",
            "description": "Update Contact request model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReceiveShipmentRequestModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "ReceiveShipmentResponse",
            "description": "Update Contact request model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReceiveShipmentResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "GetShipmentResponse",
            "description": "Get Vaccinebox response model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetShipmentResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "GetShipmentMovementsResponse",
            "description": "Get Shipment Movements response model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetShipmentMovementsResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "GetSensorDataResponse",
            "description": "Get SensorData response model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetSensorDataResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "GetAssetTransferHistoryResponse",
            "description": "Get AssetTransfer response model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAssetTransferHistoryResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "GetAuditTrailResponse",
            "description": "Get Shipment Movements response model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAuditTrailResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "AddClaimDataRequest",
            "description": "Update Deliver Shipment  request model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddClaimDataRequestModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "AddClaimDataResponse",
            "description": "Sensor Data request model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddClaimDataResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "GetClaimDataResponse",
            "description": "Get ClaimData response model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetClaimDataResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "GetRecentShipmentResponse",
            "description": "Get GetRecentShipmentResponse model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetRecentShipmentResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "GetRecentClaimResponse",
            "description": "Get GetRecentClaimResponse model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetRecentClaimResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "GraphInfo",
            "description": "Get GraphInfo model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GraphInfoModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "HighRiskNotificationResponse",
            "description": "Get HighRiskNotificationResponse model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HighRiskNotificationResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "ShipmentCount",
            "description": "Get Count Shipments model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShipmentCountModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "ClaimCount",
            "description": "Get Count Shipments model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ClaimCountModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "CountShipmentsAndClaims",
            "description": "Get CountShipmentsAndClaims model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CountShipmentsAndClaimsModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "GetHighRiskShipmentResponse",
            "description": "Get HighRiskShipments response model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetHighRiskShipmentResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "GetShipmentByPartyResponse",
            "description": "Get ShipmentByParty response model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetShipmentByPartyResponseModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "RetailerShipments",
            "description": "Get RetailerShipments response model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RetailerShipmentsModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "RouteMap",
            "description": "Get RetailerShipments response model",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RouteMapModel\"][\"Properties\"][\"Schema\"]"
            }
          },
          {
            "name": "StandardApiError",
            "description": "Nested error for StandardApiErrors",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"StandardApiErrorModel\"][\"Properties\"][\"Schema\"]"
            }
          }
        ]
      },
      "webpack": {
        "webpackConfig": "webpack.config.js",
        "includeModules": false,
        "packager": "npm"
      }
    },
    "plugins": [
      "serverless-iam-roles-per-function",
      "serverless-pseudo-parameters",
      "serverless-webpack",
      "serverless-reqvalidator-plugin",
      "serverless-aws-documentation"
    ],
    "pluginsData": {},
    "functions": {
      "createNewShipment": {
        "name": "add-shipment-v12",
        "handler": "functions/add-shipment.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/shipment",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Ship Vaccine Box",
                "description": "Initiate shipment of vaccine box",
                "requestModels": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentPost\"][\"Properties\"][\"RequestModels\"]"
                },
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Response from Ship Vaccinebox"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentPost\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Vaccinebox Integrity Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentPost\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentPost\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ]
              },
              "reqValidatorName": "RequestValidator",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateNewShipmentLambdaVersionMj1tTCEOSSrBDWou7SkLXXxqTYYwh2btE4t8woxNjm8"
      },
      "createNewRetailShipment": {
        "name": "add-retailerShipments-v12",
        "handler": "functions/add-retailerShipments.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/retailShipment",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Ship Vaccine Box",
                "description": "Initiate shipment of vaccine box to retailer",
                "requestModels": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxRetailshipmentPost\"][\"Properties\"][\"RequestModels\"]"
                },
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Response from Ship Vaccinebox"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxRetailshipmentPost\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Vaccinebox Integrity Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxRetailshipmentPost\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxRetailshipmentPost\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ]
              },
              "reqValidatorName": "RequestValidator",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateNewRetailShipmentLambdaVersionSdUTRYT4UshTcNqogLPsDexgRfa5b0sAiEJKCecFg"
      },
      "getShipmentData": {
        "name": "get-shipment-v12",
        "handler": "functions/get-shipment.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/shipment/{shipmentId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get Shipment",
                "description": "Retrieves shipment details",
                "pathParams": [
                  {
                    "name": "shipmentId",
                    "description": "ID of the Shipment to retrieve",
                    "required": true
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Shipment response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetShipmentDataLambdaVersion9YrvmjJ2Z7pGdudHB9T836JJ132CqcuGUlV8q0TFmg0"
      },
      "deliverShipment": {
        "name": "deliverShipment-v12",
        "handler": "functions/deliver-shipment.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/deliver/shipment",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Deliver Shipment",
                "description": "Updates Shipment with new Ownership",
                "requestModels": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxDeliverShipmentPut\"][\"Properties\"][\"RequestModels\"]"
                },
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Response from Deliver Shipment"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxDeliverShipmentPut\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Vaccinebox Integrity Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxDeliverShipmentPut\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxDeliverShipmentPut\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ]
              },
              "reqValidatorName": "RequestValidator",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeliverShipmentLambdaVersionHkS3HmyiC8RDwxhDGV9bSdoLBcQAqRPFe7kLCojWg4"
      },
      "receiveShipment": {
        "name": "receiveShipment-v12",
        "handler": "functions/receive-shipment.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/receive/shipment",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Update Shipment ",
                "description": "Updates Shipment with new Ownership",
                "requestModels": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxReceiveShipmentPut\"][\"Properties\"][\"RequestModels\"]"
                },
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Response from Shipment"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxReceiveShipmentPut\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Vaccinebox Integrity Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxReceiveShipmentPut\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxReceiveShipmentPut\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ]
              },
              "reqValidatorName": "RequestValidator",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ReceiveShipmentLambdaVersioneIZvuVK2rjQhriyLP6OE9YQEbOpWCxCsfmfwaDQvJY"
      },
      "addSensorData": {
        "name": "add-sensorData-v12",
        "handler": "functions/add-sensorData.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/sensorData",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Insert Sensor Data",
                "description": "Insert Sensor Data of vaccine box",
                "requestModels": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxSensordataPut\"][\"Properties\"][\"RequestModels\"]"
                },
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Response from Sensor Data Data Insert"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxSensordataPut\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Integrity Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxSensordataPut\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxSensordataPut\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ]
              },
              "reqValidatorName": "RequestValidator",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddSensorDataLambdaVersionASdIw1Px6taTjlXhzkH5mCVZuq8p3OuMLlng9Awio"
      },
      "getSensorData": {
        "name": "get-sensorData-v12",
        "handler": "functions/get-sensorData.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/alert/sensorData",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get Sensor Data ",
                "description": "Retrieves Sensor Data ",
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Sensor Data  response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxAlertSensordataGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxAlertSensordataGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxAlertSensordataGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetSensorDataLambdaVersionU2PwEKI4DzLlvNAzAnlzzLFTkS8OaR2cXT0kVgms"
      },
      "addSensorDataSimulation": {
        "name": "add-sensorDataSimulation-v12",
        "handler": "functions/add-sensorDataSimulation.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/simulateSensorData",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Insert Sensor Data",
                "description": "Insert Sensor Data of vaccine box",
                "requestModels": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxSimulatesensordataPost\"][\"Properties\"][\"RequestModels\"]"
                },
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Response from Sensor Data Data Insert"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxSimulatesensordataPost\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Integrity Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxSimulatesensordataPost\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxSimulatesensordataPost\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ]
              },
              "reqValidatorName": "RequestValidator",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddSensorDataSimulationLambdaVersionndU7urXn1PyicJiX4lDNx3fS24lOcHQ2SZ4DO3wJgQ"
      },
      "getShipmentMovements": {
        "name": "get-shipmentMovements-v12",
        "handler": "functions/get-shipmentMovements.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/events/shipmentMovements/{shipmentId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get Shipment Movement information",
                "description": "Retrieves Shipment Movement details",
                "pathParams": [
                  {
                    "name": "shipmentId",
                    "description": "ID of the Shipment to retrieve",
                    "required": true
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Shipment Movement information  response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxEventsShipmentmovementsShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxEventsShipmentmovementsShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxEventsShipmentmovementsShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetShipmentMovementsLambdaVersion3EZqYAINxBxMMcvFuvFNpwlnFxD3nZGeUhvYCKDj5Ps"
      },
      "getAuditTrail": {
        "name": "get-auditTrail-v12",
        "handler": "functions/get-auditTrail.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/report/sensorDataAuditTrail/{shipmentId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get Audit Trail information",
                "description": "Retrieves Audit Trail details",
                "pathParams": [
                  {
                    "name": "shipmentId",
                    "description": "ID of the Shipment to retrieve",
                    "required": true
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Shipment Audit Trail  response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxReportSensordataaudittrailShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxReportSensordataaudittrailShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxReportSensordataaudittrailShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetAuditTrailLambdaVersionI5Kxbzy2G8FFNWhxLZhKEWxbdi1yqyfhit9wta6EHfA"
      },
      "getTemperatureGraph": {
        "name": "get-temperatureGraph-v12",
        "handler": "functions/get-temperatureGraph.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/report/temperatureGraph/{shipmentId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get Temperature Graph information",
                "description": "Retrieves Temperature Graph details",
                "pathParams": [
                  {
                    "name": "shipmentId",
                    "description": "ID of the Shipment to retrieve",
                    "required": true
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Shipment Temperature Graph response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxReportTemperaturegraphShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxReportTemperaturegraphShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxReportTemperaturegraphShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetTemperatureGraphLambdaVersionFq2k9u3DMWbO4AeRT5iNGGMRfFaMQBXJ7i5pKav6E"
      },
      "getHumidityGraph": {
        "name": "get-humidityGraph-v12",
        "handler": "functions/get-humidityGraph.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/report/humidityGraph/{shipmentId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get humidity graph information",
                "description": "Retrieves humidity graph details",
                "pathParams": [
                  {
                    "name": "shipmentId",
                    "description": "ID of the Shipment to retrieve",
                    "required": true
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Shipment humidity graph  response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxReportHumiditygraphShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxReportHumiditygraphShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxReportHumiditygraphShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetHumidityGraphLambdaVersionxwGXVXAa9KCVIheTpnLOYoGuwt6DkphK5esfXn2ZOM"
      },
      "addInsuranceClaim": {
        "name": "add-insuranceClaim-v12",
        "handler": "functions/add-insuranceClaim.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/claimRequest",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Insert Claim Request",
                "description": "Claim Request for vaccine box shipment",
                "requestModels": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxClaimrequestPost\"][\"Properties\"][\"RequestModels\"]"
                },
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Response from Claim Data Insert"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxClaimrequestPost\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Integrity Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxClaimrequestPost\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxClaimrequestPost\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ]
              },
              "reqValidatorName": "RequestValidator",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddInsuranceClaimLambdaVersion7ZsoQuWw0GyQGgSsmjigO00N4DMRMZzfzo2Lycj5E"
      },
      "getClaimData": {
        "name": "get-claimData-v12",
        "handler": "functions/get-claimData.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/insurance/shipmentData",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get Claim Data",
                "description": "Retrieves Claim Data",
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Claim Data  response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainInsuranceShipmentdataGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "ClaimData Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainInsuranceShipmentdataGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainInsuranceShipmentdataGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetClaimDataLambdaVersiona5XzP60d2D25NkyNGPjKuEXxarYdMTvQZrPxPmfXL8"
      },
      "getShipmentLocationByParty": {
        "name": "get-shipmentLocationByParty-v12",
        "handler": "functions/get-shipmentLocationByParty.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/shipmentLocation/{party}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get Claim Data",
                "description": "Retrieves shipment with location Data",
                "pathParams": [
                  {
                    "name": "party",
                    "description": "Retrieves shipment with location Data"
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Claim Data  response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentlocationPartyVarGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "ClaimData Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentlocationPartyVarGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentlocationPartyVarGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetShipmentLocationByPartyLambdaVersiond5trfgd0dMpDsbwWSWMu8CztORB63mxHjLRZKOcB8"
      },
      "getShipmentByParty": {
        "name": "get-shipmentByParty-v12",
        "handler": "functions/get-shipmentByParty.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/shipmentByParty/{party}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get shipment data",
                "description": "Retrieves shipment data",
                "pathParams": [
                  {
                    "name": "party",
                    "description": "Manufacturer of the shipment to retrieve"
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Shipment Data  response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentbypartyPartyVarGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "ClaimData Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentbypartyPartyVarGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentbypartyPartyVarGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetShipmentByPartyLambdaVersionBOofB4WwlZSIhVHj8WWj5cdhSylXZVYmsnb8T4A"
      },
      "getRecentShipments": {
        "name": "get-recentShipments-v12",
        "handler": "functions/get-recentShipments.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/recentShipments",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get shipment data",
                "description": "Retrieves recent shipments",
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "recent shipments"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxRecentshipmentsGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxRecentshipmentsGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxRecentshipmentsGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetRecentShipmentsLambdaVersionYlvr8IDGNt6fSePMVxToof1ONHjLdegclF6MVNFqbw"
      },
      "getRecentClaims": {
        "name": "get-recentClaims-v12",
        "handler": "functions/get-recentClaims.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/recentClaims",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get recent claims data",
                "description": "Retrieves recent shipments",
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "recent claims"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxRecentclaimsGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxRecentclaimsGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxRecentclaimsGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetRecentClaimsLambdaVersionCnh8ZdYMYL5WF0306javFdsyhU3SyKXsiQmG0M1Y"
      },
      "getRecentClaimsByParty": {
        "name": "get-recentClaimsByParty-v12",
        "handler": "functions/get-recentClaimsByParty.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/recentClaimsByParty/{party}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get recent claims data",
                "description": "Retrieves recent shipments",
                "pathParams": [
                  {
                    "name": "party",
                    "description": "Party to retrieve data"
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "recent claims"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxRecentclaimsbypartyPartyVarGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxRecentclaimsbypartyPartyVarGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxRecentclaimsbypartyPartyVarGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetRecentClaimsByPartyLambdaVersion0geAbmL576kADW7wmmqeAspisiqK0AmSmSraqlMEMIA"
      },
      "notifyHighRiskShipments": {
        "name": "notify-highRiskShipments-v12",
        "handler": "functions/notify-highRiskShipments.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/notifyHighRiskShipments",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Notify High Risk Count",
                "description": "Notify High Risk Shipments",
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "High Risk Shipments"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxNotifyhighriskshipmentsGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxNotifyhighriskshipmentsGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxNotifyhighriskshipmentsGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "NotifyHighRiskShipmentsLambdaVersionmxGyYSdpyqdYlW9Ph6MueJMABA2RJb0sgHFUguZc"
      },
      "getHighRiskShipments": {
        "name": "get-highRiskShipments-v12",
        "handler": "functions/get-highRiskShipments.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/highRiskShipments",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get HighRiskShipments Data",
                "description": "Retrieves HighRiskShipments Data",
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "High Risk Shipments  response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxHighriskshipmentsGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "ClaimData Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxHighriskshipmentsGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxHighriskshipmentsGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetHighRiskShipmentsLambdaVersionW9qeTIicfrw7rIoGjVRfxYqMb5YpIVs8p8BtpaBks"
      },
      "getHighRiskShipmentsByParty": {
        "name": "get-highRiskShipmentsByParty-v12",
        "handler": "functions/get-highRiskShipmentsByParty.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/highRiskShipments/{party}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get HighRiskShipments Data",
                "description": "Retrieves HighRiskShipments Data",
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "High Risk Shipments  response"
                    }
                  }
                ],
                "pathParams": [
                  {
                    "name": "party",
                    "description": "Manufacturer of the shipment to retrieve",
                    "responseModels": {
                      "application/json": "GetHighRiskShipmentResponse"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "ClaimData Not Found Error"
                    },
                    "responseModels": {
                      "application/json": "StandardApiError"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "application/json": "StandardApiError"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetHighRiskShipmentsByPartyLambdaVersion3vkJtNYrFCOsRTbhxM2p5CE8ezGUzR6BKaOseiZrU"
      },
      "getShipmentCountByParty": {
        "name": "get-shipmentCountByParty-v12",
        "handler": "functions/get-shipmentCountByParty.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/shipmentCountByParty/{party}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get Shipments count",
                "description": "Retrieves shipments  count",
                "pathParams": [
                  {
                    "name": "party",
                    "description": "Manufacturer of the shipment to retrieve"
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Shipment count response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentcountbypartyPartyVarGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "ClaimData Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentcountbypartyPartyVarGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentcountbypartyPartyVarGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetShipmentCountByPartyLambdaVersionREqzgtMgBrQQqMdl7QeDkgbEr9sfJfApESTcROf3A"
      },
      "getShipmentCount": {
        "name": "get-shipmentCount-v12",
        "handler": "functions/get-shipmentCount.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/shipmentCount",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get Shipments count",
                "description": "Retrieves shipments  count",
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Shipment count response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentcountGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "ClaimData Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentcountGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxShipmentcountGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetShipmentCountLambdaVersionV81mlptlGy3xpj4AEcxO7fRqQFA7NpKdrcDhi5LeU"
      },
      "getClaimCountByParty": {
        "name": "get-claimCountByParty-v12",
        "handler": "functions/get-claimCountByParty.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/claimCountByParty/{party}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get Claims count",
                "description": "Retrieves claims  count",
                "pathParams": [
                  {
                    "name": "party",
                    "description": "Manufacturer of the shipment to retrieve"
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Claims count response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxClaimcountbypartyPartyVarGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "ClaimData Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxClaimcountbypartyPartyVarGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxClaimcountbypartyPartyVarGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetClaimCountByPartyLambdaVersionOhDqgd21Yp5fY8AgFW2qsyujcwCRCzTQ3XWOyHA4A"
      },
      "getClaimCount": {
        "name": "get-claimCount-v12",
        "handler": "functions/get-claimCount.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/vaccinebox/claimCount",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get Claims count",
                "description": "Retrieves claims  count",
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "Claims count response"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxClaimcountGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "ClaimData Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxClaimcountGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainVaccineboxClaimcountGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetClaimCountLambdaVersionOyhAUztEF4qYsInfF3lCtQPc28MMRU4ApQ8eLvVYQ"
      },
      "getGraphInfo": {
        "name": "get-graphInfo-v12",
        "handler": "functions/get-graphInfo.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/shipment/graphInfo",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get graph data",
                "description": "Retrieves graph data",
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "graph data"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainShipmentGraphinfoGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainShipmentGraphinfoGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainShipmentGraphinfoGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetGraphInfoLambdaVersionmBQTdY705vI6y4QLrYdMxp8nRbYNN13XYDZcQXQ"
      },
      "getTrackingProvenance": {
        "name": "get-trackingProvenance-v12",
        "handler": "functions/get-trackingProvenance.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/shipment/provenance/{shipmentId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get retailer shipments data",
                "description": "Retrieves retailer shipments data",
                "pathParams": [
                  {
                    "name": "shipmentId",
                    "description": "ID of the Shipment to retrieve",
                    "required": true
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "retailer shipments data"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainShipmentProvenanceShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainShipmentProvenanceShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainShipmentProvenanceShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetTrackingProvenanceLambdaVersionCahfvrxBQ1E70Khri8ERnPhdWgtKXhFsntQ7rGx81c"
      },
      "getShipmentRoute": {
        "name": "get-shipmentRoute-v12",
        "handler": "functions/get-shipmentRoute.handler",
        "events": [
          {
            "http": {
              "path": "coldchain/shipment/routeMap/{shipmentId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "documentation": {
                "summary": "Get routeMap shipments data",
                "description": "Retrieves routeMap shipments data",
                "pathParams": [
                  {
                    "name": "shipmentId",
                    "description": "ID of the Shipment to retrieve",
                    "required": true
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": "200",
                    "responseBody": {
                      "description": "routeMap shipments data"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainShipmentRoutemapShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][0][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "400",
                    "responseBody": {
                      "description": "Shipment Not Found Error"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainShipmentRoutemapShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][1][\"ResponseModels\"]"
                    }
                  },
                  {
                    "statusCode": "500",
                    "responseBody": {
                      "description": "Error message"
                    },
                    "responseModels": {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodColdchainShipmentRoutemapShipmentidVarGet\"][\"Properties\"][\"MethodResponses\"][2][\"ResponseModels\"]"
                    }
                  }
                ],
                "reqValidatorName": "RequestValidator"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": ".serverless\\coldchain-qldb-demo-v12.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetShipmentRouteLambdaVersionvqpaAqvAVx1krlm0pbuPQ3dFoaQvOQpM8yOqTXPDiaU"
      }
    },
    "resources": {
      "Resources": {
        "RequestValidator": {
          "Type": "AWS::ApiGateway::RequestValidator",
          "Properties": {
            "Name": "req-validator",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ValidateRequestBody": true,
            "ValidateRequestParameters": true
          }
        },
        "GatewayResponse": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseType": "BAD_REQUEST_BODY",
            "ResponseTemplates": {
              "application/json": "{\"status\":\"400\", \"title\":\"Invalid Request\", \"detail\": \"$context.error.validationErrorString\"}"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StatusCode": "400"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/coldchain-qldb-demo-v12/v12/1646495496749-2022-03-05T15:51:36.749Z",
    "artifact": ""
  }
}